# Generated by Claude 3.5

import subprocess
import sys
from typing import List, Tuple
import difflib

def generate_test_cases() -> List[str]:
    """Generate the test cases as command line arguments."""
    valid_cases = [
        '"John Doe" 20 "Computer Science" 101 85.5 92.0 88.5',
        '"Maria Garcia" 19 "Mathematics" 201 95.0 88.0 92.5 89.0',
        '"Alex Smith" 22 "Physics" 301 78.5 82.0',
        '"Sarah Johnson" 21 "Chemistry" 401 90.0',
        '"James Wilson" 18 "Biology" 501 85.0 88.0 92.0 95.0 91.0',
        '"Emma Brown" 23 "Engineering" 601 77.5 81.0 84.5',
        '"David Lee" 20 "Data Science" 701 88.0 92.5 90.0 89.5',
        '"Linda Martinez" 24 "Psychology" 801 95.5 93.0 91.0',
        '"Michael Zhang" 19 "Economics" 901 82.5 85.0 88.0',
        '"Sophie Anderson" 22 "Art History" 151 88.0 91.5 87.0 93.0',
        '"Robert Taylor" 21 "Statistics" 251 79.0 83.5 81.0',
        '"Julia White" 20 "Literature" 351 92.5 95.0 90.0',
        '"Thomas Moore" 25 "Philosophy" 451 88.5 85.0 89.0 91.5',
        '"Emily Chen" 18 "Music" 551 96.0 94.5 93.0',
        '"Daniel Kim" 23 "Architecture" 651 87.5 89.0 92.0',
        '"Anna Kowalski" 22 "Sociology" 751 84.0 86.5 88.0 85.5',
        '"Chris Patel" 20 "Anthropology" 851 91.0 88.5 93.0',
        '"Lisa Wong" 19 "Linguistics" 951 89.5 92.0 90.5',
        '"Kevin O\'Brien" 21 "History" 111 86.0 83.5 87.0 89.0',
        '"Rachel Green" 24 "Geography" 211 90.5 93.0 91.5'
    ]

    invalid_cases = [
        '"John Smith" 20 "Math"',
        '"Jane Doe" -5 "Physics" 301 88.0 92.0',
        '"Bob Wilson" 150 "Chemistry" 401 85.0 90.0',
        '"Alice Brown" 20 "Biology" -501 88.0 92.0',
        '"Tom Davis" 22 "English" 601 105.0 95.0',
        '"Sara Miller" 19 "History" 701 85.0 -92.0',
        '"" 20 "Psychology" 801 88.0 92.0',
        '"Mike Johnson" abc "Computer Science" 901 85.0',
        '"Lucy Smith" 21 "Mathematics" xyz 88.0',
        '"Peter Parker" 20 "Physics" 301 85.0 abc 90.0'
    ]

    return valid_cases + invalid_cases

def normalize_output(output: str) -> str:
    """Normalize the output by removing extra whitespace and standardizing newlines."""
    return '\n'.join(line.strip() for line in output.strip().split('\n') if line.strip())

def run_test(program_path: str, test_case: str) -> str:
    """Run a single test case and return the output."""
    try:
        cmd = f"{program_path} {test_case}"
        result = subprocess.run(cmd, shell=True, capture_output=True, text=True)
        return normalize_output(result.stdout + result.stderr)
    except subprocess.SubprocessError as e:
        return f"Error running test: {e}"

def get_expected_output() -> str:
    """Return the expected output for all test cases."""
    expected_output = """
Student Information:
------------------
Name: John Doe
Age: 20
Course: Computer Science (Code: 101)
Grades: 85.5 92.0 88.5
Average Grade: 88.67
Student Information:
------------------
Name: Maria Garcia
Age: 19
Course: Mathematics (Code: 201)
Grades: 95.0 88.0 92.5 89.0
Average Grade: 91.12
Student Information:
------------------
Name: Alex Smith
Age: 22
Course: Physics (Code: 301)
Grades: 78.5 82.0
Average Grade: 80.25
Student Information:
------------------
Name: Sarah Johnson
Age: 21
Course: Chemistry (Code: 401)
Grades: 90.0
Average Grade: 90.00
Student Information:
------------------
Name: James Wilson
Age: 18
Course: Biology (Code: 501)
Grades: 85.0 88.0 92.0 95.0 91.0
Average Grade: 90.20
Student Information:
------------------
Name: Emma Brown
Age: 23
Course: Engineering (Code: 601)
Grades: 77.5 81.0 84.5
Average Grade: 81.00
Student Information:
------------------
Name: David Lee
Age: 20
Course: Data Science (Code: 701)
Grades: 88.0 92.5 90.0 89.5
Average Grade: 90.00
Student Information:
------------------
Name: Linda Martinez
Age: 24
Course: Psychology (Code: 801)
Grades: 95.5 93.0 91.0
Average Grade: 93.17
Student Information:
------------------
Name: Michael Zhang
Age: 19
Course: Economics (Code: 901)
Grades: 82.5 85.0 88.0
Average Grade: 85.17
Student Information:
------------------
Name: Sophie Anderson
Age: 22
Course: Art History (Code: 151)
Grades: 88.0 91.5 87.0 93.0
Average Grade: 89.88
Student Information:
------------------
Name: Robert Taylor
Age: 21
Course: Statistics (Code: 251)
Grades: 79.0 83.5 81.0
Average Grade: 81.17
Student Information:
------------------
Name: Julia White
Age: 20
Course: Literature (Code: 351)
Grades: 92.5 95.0 90.0
Average Grade: 92.50
Student Information:
------------------
Name: Thomas Moore
Age: 25
Course: Philosophy (Code: 451)
Grades: 88.5 85.0 89.0 91.5
Average Grade: 88.50
Student Information:
------------------
Name: Emily Chen
Age: 18
Course: Music (Code: 551)
Grades: 96.0 94.5 93.0
Average Grade: 94.50
Student Information:
------------------
Name: Daniel Kim
Age: 23
Course: Architecture (Code: 651)
Grades: 87.5 89.0 92.0
Average Grade: 89.50
Student Information:
------------------
Name: Anna Kowalski
Age: 22
Course: Sociology (Code: 751)
Grades: 84.0 86.5 88.0 85.5
Average Grade: 86.00
Student Information:
------------------
Name: Chris Patel
Age: 20
Course: Anthropology (Code: 851)
Grades: 91.0 88.5 93.0
Average Grade: 90.83
Student Information:
------------------
Name: Lisa Wong
Age: 19
Course: Linguistics (Code: 951)
Grades: 89.5 92.0 90.5
Average Grade: 90.67
Student Information:
------------------
Name: Kevin O'Brien
Age: 21
Course: History (Code: 111)
Grades: 86.0 83.5 87.0 89.0
Average Grade: 86.38
Student Information:
------------------
Name: Rachel Green
Age: 24
Course: Geography (Code: 211)
Grades: 90.5 93.0 91.5
Average Grade: 91.67
Error: Insufficient arguments
Usage: ./program <student_name> <age> <course_name> <course_code> <grade1> [grade2] [grade3] ...
Example: ./program "John Doe" 20 "Computer Science" 101 85.5 92.0 88.5
Error: Invalid age (must be between 1 and 120)
Error: Invalid age (must be between 1 and 120)
Error: Invalid course code
Error: Invalid grade 105.000000 (must be between 0 and 100)
Error: Invalid grade -92.000000 (must be between 0 and 100)
Student Information:
------------------
Name:
Age: 20
Course: Psychology (Code: 801)
Grades: 88.0 92.0
Average Grade: 90.00
Error: Invalid age (must be between 1 and 120)
Error: Invalid course code
Student Information:
------------------
Name: Peter Parker
Age: 20
Course: Physics (Code: 301)
Grades: 85.0 0.0 90.0
Average Grade: 58.33
"""
    return normalize_output(expected_output)

def compare_outputs(actual: str, expected: str) -> Tuple[bool, str]:
    """Compare actual and expected outputs and return a tuple of (is_match, diff)."""
    if actual == expected:
        return True, "Outputs match exactly"

    # Generate a detailed diff
    differ = difflib.Differ()
    diff = list(differ.compare(actual.splitlines(), expected.splitlines()))
    diff_text = '\n'.join(diff)

    return False, diff_text

def main():
    if len(sys.argv) != 2:
        print("Usage: python test_program.py <path_to_program>")
        sys.exit(1)

    program_path = sys.argv[1]
    test_cases = generate_test_cases()

    # Run all test cases and collect output
    all_output = []
    for test_case in test_cases:
        output = run_test(program_path, test_case)
        all_output.append(output)

    # Combine all outputs
    actual_output = '\n'.join(all_output)
    expected_output = get_expected_output()

    # Compare outputs
    matches, diff = compare_outputs(actual_output, expected_output)

    print(f"Test Results:")
    print(f"{'='*50}")
    if matches:
        print("✅ All outputs match exactly!")
    else:
        print("❌ Outputs differ!")
        print("\nDifferences found:")
        print(f"{'='*50}")
        print(diff)

if __name__ == "__main__":
    main()
